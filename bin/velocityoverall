#!/usr/bin/env node

const dsp = require('../lib/dsp.js');

// Edit the following parameters as required
const SAMPLING_RATE = 2560;
const NUMBER_OF_SAMPLES = 4096;
const MIN_FILTER_FREQUENCY = 10;
const MAX_FILTER_FREQUENCY = 1000;

// Adapt this function to generate acceleration sample values (in m/s2)
function generateAccelerationSample(element, index) {
  return 9.8 * Math.sin(63 * index * 2 * Math.PI / SAMPLING_RATE); // 63Hz, 1g
  //return 9.8 * 2 * (Math.random() - 0.5); // Noise
}

// The samples will be generated using the above function
const samples = Array(NUMBER_OF_SAMPLES).fill().map(generateAccelerationSample);

// Start timing the operation
let startTime = Date.now();

// Remove any DC offset from the samples
let offsetSamples = dsp.dcOffset(samples);

// Split the time series samples into up to four sets of at least 256 samples
let sampleSets = dsp.createPowerOfTwoLengthSubSamples(offsetSamples, 256, 4);

// Calculate and average the velocityOverall subsamples
let velocityOverallSum = 0;
sampleSets.forEach((sampleSet, index) => {
  let velocityOverall = calculateVelocityOverall(sampleSet);
  console.log('velocityOverall(Set ' + index + '): ' +
              velocityOverall.toPrecision(4) + 'm/s\r\n');
  velocityOverallSum += velocityOverall;
});

// Output the results
console.log('velocityOverall(*Avg*): ' +
            (velocityOverallSum / sampleSets.length).toPrecision(4) + 'm/s');
console.log('Completed in', Date.now() - startTime, 'ms'); 

// Calculate the velocity overall of the given time series samples
function calculateVelocityOverall(samples) {

  // Apply a Hann window to the time series
  let windowedSamples = dsp.hannWindow(samples);

  // Perform a FFT on the windowed samples
  let fft = dsp.fft(windowedSamples, SAMPLING_RATE);

  // Prepare variables to highlight the peak
  let peakFrequency, peakVelocity, peakAcceleration = 0;

  // Integrate over frequency (within filter window) to get velocities
  let filteredVelocities = [];
  for(let bin = 0; bin < fft.numberOfBins; bin++) {
    if((fft.frequencies[bin] >= MIN_FILTER_FREQUENCY) &&
       (fft.frequencies[bin] <= MAX_FILTER_FREQUENCY)) {
      let velocity = fft.magnitudes[bin] / (2 * Math.PI * fft.frequencies[bin]);
      filteredVelocities.push(velocity);

      if(fft.magnitudes[bin] > peakAcceleration) {
        peakFrequency = fft.frequencies[bin];
        peakAcceleration = fft.magnitudes[bin];
        peakVelocity = velocity;
      }
    }
  }

  // Print the peak frequency/acceleration/velocity
  console.log('Peak acceleration at ' + peakFrequency + 'Hz with ' +
              peakAcceleration.toPrecision(3) + 'm/s2 and ' +
              peakVelocity.toPrecision(3) + 'm/s');

  // Calculate velocity overall as the sum the squares of the velocities in the
  // frequency domain, multiplying by 2 to account for symmetry in the Fourier
  // Transform, and then taking the square root.
  let sumOfSquares = filteredVelocities.reduce((sum, value) =>
                                                        sum + (value * value));
  let velocityOverall = Math.sqrt(2 * sumOfSquares);

  // Divide by the square root of the noise bandwidth of the Hann window (1.5)
  // to correct for the the window applied in the time series
  return velocityOverall / Math.sqrt(1.5);
}
